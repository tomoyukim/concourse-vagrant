# A dummy plugin for Barge to set hostname and network correctly at the very first `vagrant up`
module VagrantPlugins
  module GuestLinux
    class Plugin < Vagrant.plugin("2")
      guest_capability("linux", "change_host_name") { Cap::ChangeHostName }
      guest_capability("linux", "configure_networks") { Cap::ConfigureNetworks }
    end
  end
end

require 'yaml'

current_dir    = File.dirname(File.expand_path(__FILE__))
configs_file   = YAML.load_file("#{current_dir}/configs.yaml")

configs = configs_file['configs']
vm_configs = configs["vm"]

$db_disk_file = File.join(File.dirname(__FILE__), "../disk-image/", vm_configs["vdi_file"])

if not File.exist?($db_disk_file) then
  $vdi_flag = false
else
  $vdi_flag = true
end

Vagrant.configure(2) do |config|
  config.vm.define   "barge"
  config.vm.box      = "ailispaw/barge"
  config.vm.hostname = "barge"
  config.vm.network  "forwarded_port", guest: configs["port"], host: configs["port"], host_ip: configs["public_ip"]
  config.vm.network  "forwarded_port", guest: 2222, host: 2222, host_ip: configs["public_ip"]
  config.vm.network  "forwarded_port", guest: 5000, host: 5000, host_ip: configs["public_ip"]

  config.vm.synced_folder "../concourse-docker", "/vagrant", id: "vagrant"

  config.vm.provider :virtualbox do |vb|
    vb.memory = vm_configs["memory"]
    vm_cpus   = vm_configs["cpus"]

    if $vdi_flag == false then
      vb.customize ['createhd',
                    '--filename', $db_disk_file,
                    '--format', 'VDI',
                    '--size', vm_configs["vdi_size"]*1024]
    end

    vb.customize ['storageattach', :id,
                  '--storagectl', 'SATA Controller',
                  '--port', 2,
                  '--device', 0,
                  '--type', 'hdd',
                  '--medium', $db_disk_file]

  end

  if $vdi_flag == false then
    config.vm.provision :shell, path: "provision/format.sh"
  end


  if true then
    # mount vdi
    config.vm.provision :shell, path: "provision/mount.sh", run: "always"
    # startup.sh only once
    config.vm.provision :shell, path: "provision/startup.sh"
    if $vdi_flag == false then
      config.vm.provision :shell, inline: "/bin/bash /vagrant/keys/generate"
    end
    # run.sh always
    concourse_configs = configs["concourse"]
    config.vm.provision "bootstrap", type: "shell", run: "always" do |s|
      s.path = "provision/run.sh"
      s.env  = { "PUBLIC_IP" => configs["public_ip"],
                 "PORT" => configs["port"],
                 "LOCAL_USER" => concourse_configs["user"],
                 "LOCAL_USER_PASS" => concourse_configs["pass"],
                 "MAIN_TEAM_USER" => concourse_configs["main_team_user"] }
    end
  end

end
